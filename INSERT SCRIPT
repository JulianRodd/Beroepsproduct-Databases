/* Execute eerst de tabellen:
- movie 
- person 
- Genre 
- Contract 
- Payment 
Daarna:
- Customer 
- Movie_cast 
- Movie_Genre 
- Movie_Directors 
En tot slot:
- Watch_History
*/
CREATE TABLE Movie(
movie_id INT PRIMARY KEY,
title	VARCHAR(255) NOT NULL,
duration INT NULL,
"description" VARCHAR(255) NULL,
publication_year INT NULL,
cover_image VARCHAR(255) NULL,
previous_part INT NULL,
price NUMERIC(5,2) NOT NULL,
"URL" VARCHAR(255) NULL,
CONSTRAINT fk_PreviousPart FOREIGN KEY(previous_part) REFERENCES Movie(movie_id) 
ON UPDATE NO ACTION
ON DELETE NO ACTION,
CONSTRAINT chk_CurrentPubYear CHECK(publication_year>=1980 AND publication_year<= YEAR(getdate()))
);

CREATE TABLE Person(
person_id INT PRIMARY KEY,
firstname VARCHAR(50) NOT NULL,
lastname VARCHAR(50) NOT NULL,
gender VARCHAR(1)  NULL
CONSTRAINT chk_PersonGender CHECK(gender = 'F' OR gender = 'M')
);

CREATE TABLE Genre(
genre_name VARCHAR(255) PRIMARY KEY,
"description" VARCHAR(255) NULL,
);
CREATE TABLE "Contract"(
contract_type VARCHAR(10) PRIMARY KEY,
price_per_moth NUMERIC(5,2) NOT NULL,
discount_percentage NUMERIC(2) NOT NULL
);
CREATE TABLE Payment(
payment_method VARCHAR(10) PRIMARY KEY
);
CREATE TABLE Movie_Cast(
movie_id INT,
person_id INT,
"role" VARCHAR(255)
CONSTRAINT pk_cast PRIMARY KEY(movie_id,person_id, "role")
CONSTRAINT fk_person FOREIGN KEY(person_id) REFERENCES Person(person_id) 
ON UPDATE CASCADE
ON DELETE CASCADE
);

CREATE TABLE Movie_Directors(
movie_id INT,
person_id INT,
CONSTRAINT pk_MoviePerson PRIMARY KEY(movie_id,person_id),
CONSTRAINT fk_MoviePersonID FOREIGN KEY(person_id) REFERENCES Person(person_id) 
ON UPDATE CASCADE
ON DELETE CASCADE,
CONSTRAINT fk_MovieID FOREIGN KEY(movie_id) REFERENCES Movie(movie_id) 
ON UPDATE CASCADE
ON DELETE CASCADE
);

CREATE TABLE Movie_Genre(
movie_id INT,
genre_name VARCHAR(255),
CONSTRAINT pk_MovieGenre PRIMARY KEY(movie_id,genre_name),
CONSTRAINT fk_MovieGenreID FOREIGN KEY(movie_id) REFERENCES Movie(movie_id) 
ON UPDATE CASCADE
ON DELETE CASCADE,
CONSTRAINT fk_GenreName FOREIGN KEY(genre_name) REFERENCES Genre(genre_name) 
ON UPDATE CASCADE
ON DELETE CASCADE
);


CREATE TABLE Country (
country_name VARCHAR(50) PRIMARY KEY
);

CREATE TABLE Customer(
customer_mail_adress VARCHAR(255) PRIMARY KEY,
lastname VARCHAR(50) NOT NULL,
firstname VARCHAR(50) NOT NULL,
payment_method VARCHAR(10) NOT NULL,
payment_card_number VARCHAR(30) NOT NULL,
contract_type VARCHAR(10) NOT NULL,
subscription_start date  NOT NULL,
subscription_end date NULL,
"user_name" VARCHAR(30) NOT NULL,
"password" VARCHAR(50) NOT NULL,
country_name VARCHAR(50) NOT NULL,
gender char(1) NULL,
birth_date date NULL,
CONSTRAINT fk_customerPayment FOREIGN KEY(payment_method) REFERENCES Payment(payment_method) 
ON UPDATE CASCADE
ON DELETE CASCADE,
CONSTRAINT fk_customerContract FOREIGN KEY(contract_type) REFERENCES "Contract"(contract_type) 
ON UPDATE CASCADE
ON DELETE CASCADE,
CONSTRAINT fk_customerCountry FOREIGN KEY(country_name) REFERENCES Country(country_name) 
ON UPDATE CASCADE
ON DELETE CASCADE,
CONSTRAINT ckh_startsub CHECK(subscription_start<subscription_end),
CONSTRAINT uc_User_name UNIQUE("user_name"),
CONSTRAINT chk_customer_mail CHECK(customer_mail_adress LIKE '%@%.%'),
CONSTRAINT chk_Birth_date CHECK(birth_date<GETDATE()),
CONSTRAINT uc_password UNIQUE("password")
); 

CREATE TABLE WatchHistory(
movie_id INT,
customer_mail_adress VARCHAR(255),
watchdate date,
price NUMERIC(5,2) NOT NULL,
invoiced bit NOT NULL,
CONSTRAINT pk_CustomerHistory PRIMARY KEY(movie_id,customer_mail_adress,watchdate),
CONSTRAINT fk_MovieHistoryID FOREIGN KEY(movie_ID) REFERENCES Movie(movie_id) 
ON UPDATE CASCADE
ON DELETE NO ACTION,
CONSTRAINT fk_customerMail FOREIGN KEY(customer_mail_adress) REFERENCES Customer(customer_mail_adress)
ON UPDATE CASCADE
ON DELETE NO ACTION
);

/* De kolom watchdate bestaad niet dus opdracht 1B V kan niet gedaan worden.
   De constraint CONSTRAINT chk_customer_mail CHECK(customer_mail_adress LIKE '%@%.%') hebben we zelf bedacht voor opdracht 1C.
   De constraint CONSTRAINT chk_Birth_date CHECK(birth_date<GETDATE()) hebben we zelf bedacht voor opdracht 1C.
   De constraint CONSTRAINT uc_password UNIQUE("password") hebben we zelf bedacht voor opdracht 1C.
*/
/* opdracht 2 gevuld*/
INSERT INTO FLETNIX.dbo.Person
SELECT DISTINCT CAST( p.Id AS int) AS person_id ,
LEFT(p.FName,50) AS lastname ,
LEFT(p.Lname,50) AS firstname ,
p.Gender AS gender
FROM MYIMDB.dbo.Imported_Person p, MYIMDB.dbo.Imported_Directors d, MYIMDB.dbo.Imported_Movie_Directors dm, MYIMDB.dbo.Imported_Movie m

SELECT * 
FROM PERSON

DELETE 
FROM Person
WHERE person_id IS NOT NULL

INSERT INTO FLETNIX.dbo.Person
SELECT DISTINCT G.Genre AS Genre_name
FROM MYIMDB.dbo.Imported_Genre G
